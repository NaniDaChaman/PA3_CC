---
#
# Author: Aniruddha Gokhale
# CS4287/5287 Principles of Cloud Computing
# Created: Fall 2024
#
# Purpose: 
#   This playbook can be used if you would like to try doing
#   the actions from the master playbook step by step. Simply
#   copy the next play from the master to here and execute
#   just this play and make sure it is working. If everything
#   works correctly, you may then terminate your VMs once again
#   and just run the master playbook end to end
#

################################################################
### Play 1: check if required variables are defined or not.
#           If not defined then simply exit the entire play
#
################################################################

- name: "Check if required variables that drive the deployment are defined"
  hosts: CloudVMs # this alias is specified in the inventory file
  remote_user:  "cc"  # since the play executes on LocalMC,
                                    # we use the local user
  gather_facts: no
  collections:    # collections is like import the necessary Ansible
                  # galaxy packages needed for the play to execute
  - ansible-base

  tasks:
  # @@ You have to write the following child playbook @@
   - name: Ping my hosts
     ansible.builtin.ping:
  #- import_tasks: tasks/playbook_check_variables.yaml
   - name: Print message
     ansible.builtin.debug:
      msg: Hello world

# ####################################################
# ## Play 2: Create VMs on the Cloud

# ####################################################
- name: launch a compute instance
  hosts: localhost
  vars_files:
   - variables.yaml
  tasks:
    - name: launch an instance
      openstack.cloud.server:
        cloud: CH-822922 
        state: present
        key_name: cloud2 #might have to import public key then do it!!!
        name: "{{ item }}"
        #availability_zone: az2
        image: cdbbbe8f-f5a5-499c-b4b3-9b7dbecbdfd5
        network: CH-822922-net
       # key_name: 
        timeout: 200
        flavor: m1.medium
        security_groups:
        - default
        - ENABLE_SSH
        auto_ip: false
      loop: "{{ server_names }}"
# # #####################################################

#####################################################
### Play 3: Get facts from Cloud VM
#
# In this play, you must retrieve various facts of the
# VMs you have created. The most important are their
# private IP addresses that you will need in subsequent
# plays
#####################################################
- name: "Play 3: Perform fact gathering on all Cloud VMs"
  hosts: LocalMC  # specified in the Inventory file
  #vars:
    #local_user: amarn
  vars_files:
   - variables.yaml
  remote_user:  "{{ cloud_user }}"
  gather_facts: no
  become: false
  collections:
  - ansible-base
  - openstack.cloud.collection

  tasks:    # the task to be performed
  # @@ You have to write the following child playbook @@
  #- import_tasks: tasks/playbook_retrieve_facts_vms.yaml
  - name: Keeping up with the Kardashians
    openstack.cloud.server_info:
      cloud: CH-822922
      name: "tm13_*"
      #changes with vm name 
      filters:
        vm_state: active
    register: our_servers

  - name: Display output of our_servers
    ansible.builtin.debug:
      msg : "{{ our_servers['servers'][0]['name'] }}"

  # - name: Write the facts in Inventory
  #   lineinfile:
  #    path: Inventory.ini
  #    insertafter: "[Cloud_VMs:vars]"
  #    line: "{{ item['name'] }}={{ item['addresses']['CH-822922-net'][0]['addr'] }}"
  #   loop: "{{ our_servers['servers'] }}"

  - name: Write the facts in Inventory
    lineinfile:
     path: Inventory.ini
     insertafter: "robert_kardashian"
     line: "{{ item['name'] }} ansible_host={{ item['addresses']['CH-822922-net'][0]['addr'] }}"
    loop: "{{ our_servers['servers'] }}"

  - name: Write the DockerReg in Inventory
    lineinfile:
     path: Inventory.ini
     insertafter: 'dockerreg'
     #line : "I am working "
     line: "{{ our_servers['servers'][0]['name'] }} ansible_host={{ our_servers['servers'][0]['addresses']['CH-822922-net'][0]['addr'] }}"
    #msg: our_servers['servers'][0]['name']


# # #####################################################
- name: "Play 4 - Install various packages on Cloud VMs"
  hosts: CloudVMs   # specified in the Inventory file
  vars_files:
   - variables.yaml
  remote_user: "{{ cloud_user }}" # since this play operates on the cloud
                                  # VMs, the user on those VMs is the
                                  # cloud_user variable
  become: true  # by setting this, we perform operations with sudo privilege
  gather_facts: no
  collections:
  - ansible-base

  tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: yes

    - name: Install Python and Pip
      package:
        name:
          - python3
          - python3-pip
        state: present
        
    - name: Install Python packages
      pip:
        name:
          - numpy
          - pandas
          - flask
          - torch
          - torch-vision
        state: present

#     # the task to be performed
#   # @@ You have to write the following child playbooks @@
#   # tasks:
#   # - name: Download AnaConda installer
#   #   get_url:
#   #     url: https://repo.anaconda.com/archive/Anaconda3-2024.06-1-Linux-x86_64.sh
#   #     dest: /tmp/Anaconda3-2024.06-1-Linux-x86_64.sh
#   #     mode: '0755'

#   # - name: Install Conda
#   #   command: /tmp/Anaconda3-2024.06-1-Linux-x86_64.sh -b -p /opt/anaconda
#   #   environment:
#   #     CONDA_PREFIX: /opt/anaconda

#   # - name: Add Conda to PATH
#   #   lineinfile:
#   #     path: ~/.bashrc
#   #     regexp: '^export PATH=/opt/anaconda/bin:'
#   #     line: 'export PATH=/opt/anaconda/bin:$PATH'

#   # -name: Initilise Conda
#   #   ansible.builtin.shell: source /opt/anaconda/bin/activate
#   #   ansible.builtin.shell : conda init
  
#   # -name : verify Installation
#   #   ansible.builtin.shell : conda list
#   # register: list
#   # msg : "{{ list }}"

# #####################################################
# ### Play 5: Install Docker on our Cloud VMs
# #
# #####################################################
- name: "Play 5 - Install Docker on Cloud VMs"
  hosts: CloudVMs   # specified in the Inventory file
  vars_files:
    - variables.yaml
  remote_user: "{{ cloud_user }}" # since this play operates on the cloud
  become: yes
  tasks:

    - name: Remove any package from the old version
      apt:
        name: docker
        state: absent

    - name: Install docker dependencies
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
        update_cache: yes

    - name: Add GPG key
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -

    - name: Add docker repository to apt
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present

    - name: Install docker
      apt:
        pkg:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        update_cache: yes

    - name: Start docker deamon
      service:
        name: docker
        state: started
        enabled: yes

    - name: add user permission
      ansible.builtin.shell: sudo usermod -aG docker "{{ cloud_user }}"

#     # - name: check docker is running correctly
#     #   ansible.builtin.shell: docker run hello-world
#     #   register: output
#     #   msg: "{{ output }}"

# # #####################################################
# # ### Play 6: Download and Install Kafka on our Cloud VMs
# # #
# # #####################################################

# @@ My suggestion is that instead of each VM downloading the
#    entire kafka distribution, we could download it locally
#    on the controller machine.
# 
#    Subsequently, we then copy the *.tgz file to each VM where
#    we untar and uncompress it @@
- name: "Play 6 - Install Kafka"
  hosts: CloudVMs
  vars_files:
    - variables.yaml
  become: yes
  become_user: root
  #become_method: sudo

  tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: yes

    - name: Install default-jre
      apt:
        name: default-jre
        state: latest

    - name: Install kafka-python library
      pip:
        name: kafka-python

    - name: Download Kafka
      get_url:
        url: https://archive.apache.org/dist/kafka/2.8.0/kafka_2.13-2.8.0.tgz
        dest: /home/cc/kafka.tgz

    - name: add user permission
      ansible.builtin.shell: sudo chown {{ cloud_user }}:{{ cloud_user }} kafka.tgz 

    - name: Extract Kafka
      unarchive:
        src: /home/cc/kafka.tgz
        dest: /home/cc/
        remote_src: yes
        extra_opts: [--strip-components=1]

    
# # #####################################################
# # ### Play 6.1: Set up a Kafka Broker
# # #
# # #####################################################
# # - name: "Play 6.1 - Set up a Kafka Broker"
# #   vars_files:
# #      - variables.yaml
# #   hosts: kim_kardashian 
# #   become: yes
# #   become_user: root
# #  # become_method: sudo
# #   tasks:
# #     - name: Config 0 - Set broker.id in server.properties
# #       lineinfile:
# #         path: /home/cc/config/server.properties
# #         regexp: '^broker.id'
# #         line: 'broker.id=1'

# #     - name: Config 1 - Set listeners in server.properties
# #       lineinfile:
# #         path: /home/cc/config/server.properties
# #         regexp: '^#listeners=PLAINTEXT://:9092'
# #         line: 'listeners=PLAINTEXT://:9092'

# #     - name: Config 2 - Set advertised.listeners in server.properties
# #       lineinfile:
# #         path: /home/cc/config/server.properties
# #         regexp: '^#advertised.listeners=PLAINTEXT://your.host.name:9092'
# #         line: advertised.listeners=PLAINTEXT://{{ ansible_host }}:9092

# #     - name: Config 3 - Set listener.security.protocol.map in server.properties
# #       lineinfile:
# #         path: /home/cc/config/server.properties
# #         regexp: '^#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL'
# #         line: listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# #     - name: Remove old Kafka and Zookeeper temporary files
# #       ansible.builtin.shell: sudo rm -rf /tmp/zookeeper/ /tmp/kafka*

# #     - name: Start Zookeeper
# #       ansible.builtin.shell: bin/zookeeper-server-start.sh config/zookeeper.properties
# #       async: 300
# #       poll: 0

# #     - name: Start Kafka Broker
# #       ansible.builtin.shell: bin/kafka-server-start.sh config/server.properties
# #       async: 300
# #       poll: 0


# # #####################################################
# # ### Play 7: Set firewalld rules
# # #####################################################
# # - name: "Play 7 - Handle Firewalld policies"
# #   hosts: CloudVMs   # specified in the Inventory file
# #   vars_files:
# #      - variables.yaml
# #   remote_user: "{{ cloud_user }}" # since this play operates on the cloud
# #                                   # VMs, the user on those VMs is the
# #                                   # cloud_user variable
# #   become: true  # we set it here instead of doing per task unless
# #                 # there is a need to use non-sudo for any subtask
# #   gather_facts: false
# #   collections:
# #   - ansible-base
# #   - community.general

# #   # tasks:
# #   #   - name: Install UFW (Uncomplicated Firewall)
# #   #     apt:
# #   #       name: ufw
# #   #       state: present

# #   #   - name: Enable UFW
# #   #     ansible.builtin.shell: ufw enable
# #   #     ignore_errors: yes   # In case UFW is already enabled

# #   #   - name: Allow Kafka port 9092
# #   #     ansible.builtin.shell: ufw allow 9092/tcp

# #   #   - name: Allow custom port 2128
# #   #     ansible.builtin.shell: ufw allow 2128/tcp

# #   #   - name: Allow Zookeeper port 2181
# #   #     ansible.builtin.shell: ufw allow 2181/tcp

# #   #   - name: Reload UFW to apply changes
# #   #     ansible.builtin.shell: ufw reload

# # #####################################################
# # ### Play 8: Copy the appropriate files for Kubernetes
# # #####################################################

# # - name: "Play 8 - Copy Files Kubernetes"
# #   hosts: 192.168.5.247   # specified in the Inventory file
# #   vars_files:
# #      - variables.yaml
# #   remote_user: "{{ cloud_user }}" # since this play operates on the cloud
# #                                   # VMs, the user on those VMs is the
# #                                   # cloud_user variable
# #   become: true  # we set it here instead of doing per task unless
# #                 # there is a need to use non-sudo for any subtask

# #   tasks: 
# #     - name: Copy install_k8.sh 
# #       ansible.builtin.copy:
# #         src: install_k8.sh
# #         dest: .
# #         owner: "{{ cloud_user }}"
# #         group: "{{ cloud_user }}"
# #         mode: '0777' 

# #     - name: Copy config.toml 
# #       ansible.builtin.copy:
# #         src: config.toml
# #         dest: /etc/containerd/config.toml
# #         owner: "{{ cloud_user }}"
# #         group: "{{ cloud_user }}"
# #         mode: '0777' 

# #####################################################
# ### Play 9: Install Kubernetes
# #####################################################

- name: Kubernetes installation on Cloud VMs
  hosts: CloudVMs
  become: yes
  tasks:

    - name: Prereq
      apt:
        name:
          - gpg 
        update_cache: yes
    
    - name: Make Directory for Ansible
      ansible.builtin.file:
        path: /etc/apt/keyrings 
        state: directory
        mode: '0755'

    - name: Add a key for kubernetes
      shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg


    - name: Add apt repository for kubernetes
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list.d/kubernetes.list
        line: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /'
        create: yes

    - name : Update apt
      apt:
        update_cache: yes
        upgrade: yes

    - name: Install kubernetes
      become_user: root
      apt:
        name: 
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes

    - name: Enable and start kubelet service
      systemd:
        name: kubelet
        enabled: yes
        state: started
    
    - name: Hold kubelet, kubeadm, and kubectl packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl
    
    - name: Apply system-wide sysctl settings of ip forwarding and reload if necessary
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: true
        state: present
        reload: true
    
    - name: Add private reg to config.toml
      lineinfile:
        path: /etc/containerd/config.toml
        insertafter: '[plugins."io.containerd.grpc.v1.cri".registry.mirrors]'
        line: '[plugins."io.containerd.grpc.v1.cri".registry.mirrors."{{ ansible_host }}:5000"] endpoint = ["{{ ansible_host }}"]'
   
    # - name: Add line to k8s.conf file
    #   lineinfile:
    #     path: /etc/sysctl.d/k8s.conf
    #     line: 'net.ipv4.ip_forward = 1'
    #     state: present
    #     create: yes

    # - name: Apply system-wide sysctl settings
    #   ansible.posix.sysctl:
    #     sysctl_file: /etc/sysctl.d/*.conf
    #     sysctl_set: yes
    #     state: present

    - name: Restart containerd service
      systemd:
        name: containerd.service
        state: restarted

    - name: Restart docker service
      systemd:
        name: docker.service
        state: restarted

    - name: Disable the swap files
      become_user: root
      command: swapoff -a

#####################################################
### Play 10: Create docker registry
#####################################################
- name: Create docker registry
  hosts: DockerReg
  become: yes
  tasks:

  - name: "remove any old daemon.json file"
    file:
      path: /etc/docker/daemon.json
      state: absent

  - name: "create fresh daemon.json file"
    copy:
      dest: /etc/docker/daemon.json
      content: |
        {
          "exec-opts": ["native.cgroupdriver=systemd"],
          "log-driver": "json-file",
          "log-opts": {
          "max-size": "100m"
          },
          "storage-driver": "overlay2",
          "insecure-registries" : ["{{ ansible_host }}:5000"]
        }

  - name: "reload daemon information and docker service"
    systemd:
      state: restarted
      daemon_reload: yes
      name: docker

  - name: Add private reg to config.toml
    lineinfile:
      path: /etc/containerd/config.toml
      insertafter: '[plugins."io.containerd.grpc.v1.cri".registry.mirrors]'
      line: '[plugins."io.containerd.grpc.v1.cri".registry.mirrors."{{ ansible_host }}:5000"] endpoint = ["{{ ansible_host }}"]'

  - name: Restart containerd service
    systemd:
      name: containerd.service
      state: restarted

  - name: Restart docker service
    systemd:
      name: docker.service
      state: restarted